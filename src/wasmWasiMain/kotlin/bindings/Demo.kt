// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!

@file:OptIn(UnsafeWasmMemoryApi::class)

import kotlin.wasm.unsafe.*

object Ui {

  /** Shape of a button. */
  enum class Shape {
    RECTANGLE,
    ROUNDED,
    CIRCLE,
  }

  /** RGB color with red, green, and blue components. */
  data class Rgb(
      var r: UByte,
      var g: UByte,
      var b: UByte,
  )

  /** Color for UI elements. */
  sealed interface Color {
    data class Rgb(val value: Ui.Rgb) : Color

    data class Hex(val value: String) : Color
  }
  /** Modifiers for UI elements. */
  value class Modifiers internal constructor(val _value: Long) {
    constructor(
        outlined: Boolean = false,
        shadow: Boolean = false,
        gradient: Boolean = false,
    ) : this(
        0L or
            (if (outlined) (1L shl 0) else 0L) or
            (if (shadow) (1L shl 1) else 0L) or
            (if (gradient) (1L shl 2) else 0L))

    val outlined: Boolean
      get() = (_value and (1L shl 0)) != 0L

    val shadow: Boolean
      get() = (_value and (1L shl 1)) != 0L

    val gradient: Boolean
      get() = (_value and (1L shl 2)) != 0L
  }
  /** Create a button with specified attributes. */
  public fun createButton(
      label: String,
      shape: Ui.Shape,
      color: Ui.Color,
      modifiers: Ui.Modifiers?
  ): Unit {
    // <editor-fold defaultstate="collapsed" desc="Generated Bindings Code">
    withScopedMemoryAllocator { allocator ->
      val bytearray = label.encodeToByteArray()
      val len = bytearray.size
      val ptr = allocator.writeToLinearMemory(bytearray).address.toInt()

      // VariantLower START
      val variant: Int
      val variant4: Int
      val variant5: Int
      val variant6: Int
      when (val x = color) {
        is Ui.Color.Rgb -> {
          val payload = x.value
          variant = 0
          variant4 = payload.r.toInt()
          variant5 = payload.g.toInt()
          variant6 = payload.b.toInt()
        }
        is Ui.Color.Hex -> {
          val payload0 = x.value

          val bytearray3 = payload0.encodeToByteArray()
          val len2 = bytearray3.size
          val ptr1 = allocator.writeToLinearMemory(bytearray3).address.toInt()

          variant = 1
          variant4 = ptr1
          variant5 = len2
          variant6 = 0
        }
        else -> error("unreachable")
      }
      // VariantLower END
      val option: Int
      val option9: Int
      val payload8 = modifiers
      if (payload8 != null) {
        option = 1
        option9 = payload8._value.toInt()
      } else {
        option = 0
        option9 = 0
      }
      __wasm_import_createButton(
          ptr, len, shape.ordinal, variant, variant4, variant5, variant6, option, option9)
      freeAllComponentModelReallocAllocatedMemory()
    }
    // </editor-fold>
  }
  /** Create an HTML text area with specified content. */
  public fun createHtmlTextArea(html: String): Unit {
    // <editor-fold defaultstate="collapsed" desc="Generated Bindings Code">
    withScopedMemoryAllocator { allocator ->
      val bytearray = html.encodeToByteArray()
      val len = bytearray.size
      val ptr = allocator.writeToLinearMemory(bytearray).address.toInt()

      __wasm_import_createHtmlTextArea(ptr, len)
      freeAllComponentModelReallocAllocatedMemory()
    }
    // </editor-fold>
  }
}

object Markdown {
  /** Converts Markdown-formatted text to HTML. */
  public fun convertMarkdownToHtml(markdown: String): String {
    // <editor-fold defaultstate="collapsed" desc="Generated Bindings Code">
    withScopedMemoryAllocator { allocator ->
      val bytearray = markdown.encodeToByteArray()
      val len = bytearray.size
      val ptr = allocator.writeToLinearMemory(bytearray).address.toInt()

      val ptr0 = /* RETURN_ADDRESS_ALLOC(size=8, align=4)*/ allocator.allocate(8).address.toInt()
      __wasm_import_convertMarkdownToHtml(ptr, len, ptr0)
      freeAllComponentModelReallocAllocatedMemory()
      return STRING_FROM_MEM((ptr0 + 0).ptr.loadInt(), (ptr0 + 4).ptr.loadInt())
    }
    // </editor-fold>
  }
}

interface RunExports {
  abstract fun run(): Unit
}
